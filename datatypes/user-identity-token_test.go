// Copyright 2018 gopcua authors. All rights reserved.
// Use of this source code is governed by a MIT-style license that can be
// found in the LICENSE file.

package datatypes

import (
	"testing"

	"github.com/wmnsk/gopcua/utils/codectest"
)

func TestAnonymousIdentityToken(t *testing.T) {
	cases := []codectest.Case{
		{
			Name:   "normal",
			Struct: NewAnonymousIdentityToken("anonymous"),
			Bytes: []byte{
				0x09, 0x00, 0x00, 0x00,
				0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73,
			},
		},
	}
	codectest.Run(t, cases, func(b []byte) (codectest.S, error) {
		return DecodeAnonymousIdentityToken(b)
	})
}

func TestUserNameIdentityToken(t *testing.T) {
	cases := []codectest.Case{
		{
			Name:   "normal",
			Struct: NewUserNameIdentityToken("username", "user", []byte{0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64}, "plain"),
			Bytes: []byte{
				// PolicyID
				0x08, 0x00, 0x00, 0x00, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
				// UserName
				0x04, 0x00, 0x00, 0x00, 0x75, 0x73, 0x65, 0x72,
				// Password
				0x08, 0x00, 0x00, 0x00, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
				// EncryptionAlgorithm
				0x05, 0x00, 0x00, 0x00, 0x70, 0x6c, 0x61, 0x69, 0x6e,
			},
		},
	}
	codectest.Run(t, cases, func(b []byte) (codectest.S, error) {
		return DecodeUserNameIdentityToken(b)
	})
}

func TestX509IdentityToken(t *testing.T) {
	cases := []codectest.Case{
		{
			Name:   "normal",
			Struct: NewX509IdentityToken("x509", "certificate"),
			Bytes: []byte{
				// PolicyID
				0x04, 0x00, 0x00, 0x00, 0x78, 0x35, 0x30, 0x39,
				// CertificateData
				0x0b, 0x00, 0x00, 0x00, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
			},
		},
	}
	codectest.Run(t, cases, func(b []byte) (codectest.S, error) {
		return DecodeX509IdentityToken(b)
	})
}

func TestIssuedIdentityToken(t *testing.T) {
	cases := []codectest.Case{
		{
			Name:   "normal",
			Struct: NewIssuedIdentityToken("issued", []byte{0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64}, "plain"),
			Bytes: []byte{
				// PolicyID
				0x06, 0x00, 0x00, 0x00, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64,
				// TokenData
				0x08, 0x00, 0x00, 0x00, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
				// EncryptionAlgorithm
				0x05, 0x00, 0x00, 0x00, 0x70, 0x6c, 0x61, 0x69, 0x6e,
			},
		},
	}
	codectest.Run(t, cases, func(b []byte) (codectest.S, error) {
		return DecodeIssuedIdentityToken(b)
	})
}
